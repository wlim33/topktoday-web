---
const { userID } = Astro.props;

var date = new Date();
var one_day_forward = new Date();
one_day_forward.setDate(date.getDate() + 1);

one_day_forward.setMilliseconds(0);
one_day_forward.setSeconds(0);
date.setMilliseconds(0);
date.setSeconds(0);

const today = date.toISOString().replace(":00.000Z", "");
const tomorrow = one_day_forward.toISOString().replace(":00.000Z", "");
---

<dialog id="new-leaderboard-modal" data-user={userID}>
	<article>
		<header>
			<a
				type=""
				aria-label="Close"
				class="close-modal"
				rel="prev"></a>
			<h4 style="text-align: center;">New Leaderboard</h4>
		</header>

		<form id="new-leaderboard-modal-form">
			<fieldset>
				<label> Leaderboard Title </label>
				<input
					name="title"
					placeholder="Weekly Bar Trivia Rankings"
					aria-label="new-leaderboard-title"
					autocomplete="new-leaderboard-title"
				/>

				<small id="display-name-helper"
					>This title will be public.</small
				>

				<details open>
					<summary
						>Advanced options (Optional)</summary
					>

					<fieldset>
						<legend> Rank by: </legend>
						<input
							type="radio"
							name="is-highest-score"
							id="highest-score"
							checked
						/>
						<label for="highest-score"
							>Highest score</label
						>
						<input
							type="radio"
							name="is-highest-score"
							id="lowest-time"
						/>
						<label for="lowest-time"
							>Lowest time</label
						>
					</fieldset>
					<fieldset>
						<input
							type="checkbox"
							id="only-one-submission"
							name="only-one-submission"
						/>
						<label for="only-one-submission"
							>Players can only show
							up once on the
							leaderboard
						</label>
					</fieldset>

					<fieldset>
						<nav>
							<label
								>Start accepting
								<span
									>submissions</span
								>
								at:
							</label>
							<label>
								<input
									id="start-date-now"
									name="start-date-now"
									type="checkbox"
									role="switch"
									checked
								/>
								Now
							</label>
						</nav>
						<input
							id="start-datetime"
							type="datetime-local"
							name="start-datetime"
							aria-label="Start datetime local"
						/>
					</fieldset>
					<fieldset>
						<nav>
							<label
								>Stop accepting
								<span
									>submissions</span
								>
								after:
							</label>
							<label>
								<input
									id="end-date-never"
									name="end-date-never"
									type="checkbox"
									role="switch"
								/>
								Never
							</label>
						</nav>

						<input
							id="cutoff-datetime"
							type="datetime-local"
							name="cutoff-datetime"
							aria-label="End datetime local"
						/>
					</fieldset>
				</details>
			</fieldset>
			<button type="submit">Get Link</button>
		</form>
		<div role="alert" aria-live="assertive"></div>

		<script>
			import {
				setupForm,
				hideBasedOn,
			} from "@/lib/client/utils";
			import { newLeaderboard } from "@/lib/client/formSubmits";
			import { newLeaderboardSchema } from "@/lib/client/schemas";
			import { LEADERBOARD_PAGE_BASE } from "@/lib/client/urls";
			import { navigate } from "astro:transitions/client";

			const closeModal = () => {
				const modal = document.querySelector(
					"#new-leaderboard-modal",
				);

				modal?.attributes.removeNamedItem("open");
				document.documentElement.classList.remove(
					"modal-is-open",
				);

				document.documentElement.classList.remove(
					"modal-is-opening",
				);
				document.documentElement.classList.add(
					"modal-is-closing",
				);
			};

			hideBasedOn("#end-date-never", "input#cutoff-datetime");
			hideBasedOn("#start-date-now", "input#start-datetime");

			setupForm("#new-leaderboard-modal-form", {
				onBusy: "Creating...",
				schema: newLeaderboardSchema,
				onSubmit: async (submission) => {
					const id =
						await newLeaderboard(
							submission,
						);

					navigate(
						`${LEADERBOARD_PAGE_BASE}/${id}`,
					);
					return true;
				},
			});

			document.querySelectorAll(".close-modal").forEach(
				(elem) => {
					elem.addEventListener(
						"click",
						(e: Event) => {
							e.preventDefault();
							closeModal();
						},
					);
				},
			);
		</script>
	</article>
</dialog>
