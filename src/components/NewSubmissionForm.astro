---
import CopyLink from "./CopyLink.astro";
const { info, leaderboardId } = Astro.props;

const { user } = Astro.locals;
console.log(info);
const isLoggedIn: boolean =
	user !== null &&
	user.isAnonymous !== null &&
	user.isAnonymous !== false;
const title = `Submit your ${info.is_time ? "time" : "score"} for ${info.title}`;
---

<new-submission
	class="card bg-base-100 shadow-sm border-base-300 text-base-content w-full"
>
	<header class="w-max-full">
		<span class="lg:text-xl xl:text-2xl">
			<span> Submit your </span>
			<span class="underline decoration-dotted">
				{`${info.is_time ? "time" : "score"} `}
			</span>
			<span> for </span>
			<CopyLink
				link={`www.topktoday.dev/leaderboard/${leaderboardId}`}
				directionBottom={true}
			>
				<u
					class="lg:text-xl xl:text-2xl link link-primary link-hover"
				>
					{info.title}
				</u>
			</CopyLink>
		</span>
	</header>

	<form id="new-submission-form">
		<fieldset class="fieldset">
			<legend class="fieldset-legend">
				{info.is_time ? "Time" : "Score"}
			</legend>
			<label class="input">
				<span class="opacity-50">
					{info.is_time ? "HH:MM:SS" : "Score"}
				</span>
				<input
					id="new-submission-score"
					name="score"
					placeholder={info.is_time
						? "12:00:00"
						: "90000"}
					aria-label="submission-score"
					type={info.is_time ? "time" : "number"}
					step="0.001"
					class="grow"
				/>
			</label>

			<label class="fieldset-label">
				{
					info.highest_first
						? "The highest values will be placed at the top of the leaderboard."
						: "The lowest values will be placed at the top of the leaderboard."
				}
			</label>
		</fieldset>

		<fieldset class="fieldset">
			<legend class="fieldset-legend">
				Link attachment</legend
			>
			<label class="input validator">
				<svg
					class="h-[1em] opacity-50"
					xmlns="http://www.w3.org/2000/svg"
					viewBox="0 0 24 24"
					><g
						stroke-linejoin="round"
						stroke-linecap="round"
						stroke-width="2.5"
						fill="none"
						stroke="currentColor"
						><path
							d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"
						></path><path
							d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"
						></path></g
					></svg
				>
				<input
					name="link"
					type="url"
					required
					placeholder="https://"
					value="https://"
					pattern="^(https?://)?([a-zA-Z0-9]([a-zA-Z0-9\-].*[a-zA-Z0-9])?\.)+[a-zA-Z].*$"
					title="Must be valid URL"
				/>
			</label>
			<p class="validator-hint">Must be valid URL</p>
		</fieldset>
		<div class="flex flex-col my-4">
			<div class="flex justify-center">
				<button
					class="btn btn-accent btn-sm md:btn-md lg:btn-lg xl:btn-lg w-fit"
					type="submit"
					>Submit for validation</button
				>
			</div>
		</div>

		{
			isLoggedIn && (
				<span class="text-center">
					<a
						href="/login"
						id="login-link"
						style="cursor: pointer;"
						class="link link-primary"
					>
						Log in
					</a>{" "}
					or{" "}
					<a
						href="/register"
						id="register-link"
						class="link link-primary"
						style="cursor: pointer;"
					>
						register
					</a>{" "}
					to customize your display name.
				</span>
			)
		}
	</form>
	<div role="alert" aria-live="assertive"></div>
	<script>
		import { setupForm } from "@/lib/client/utils";
		import { addScore } from "@/lib/client/formSubmits";
		import { getPageData } from "@/lib/client/utils";
		import { newSubmission } from "@/lib/client/schemas";
		import { navigate } from "astro:transitions/client";

		class NewSubmission extends HTMLElement {
			connectedCallback() {
				setupForm(
					this.querySelector(
						"#new-submission-form",
					) as HTMLFormElement,
					{
						onBusy: "Submitting...",
						schema: newSubmission,
						emitEvent: new CustomEvent(
							"update",
							{
								bubbles: true,
							},
						),
						onSubmit: async (submission: {
							file: File;
							link: string;
							score: number;
						}) => {
							await addScore(
								submission.score,
								submission.link,
							);

							await navigate(
								`/leaderboard/${
									getPageData()
										.leaderboard
								}`,
							);
							return true;
						},
					},
				);
			}
		}

		customElements.define("new-submission", NewSubmission);
	</script>
</new-submission>
