---
import { getRemaining } from "@/lib/server/utils";
const { start, rawduration } = Astro.props;

const remainingDuration = getRemaining(start, rawduration);
---

<count-down
	class="text-md opacity-60"
	data-duration={rawduration}
	data-start={start}
>
	<div class="flex justify-center gap-2">
		<span class="countdown font-mono text-md"> Closes in </span>
		<span
			class="countdown font-mono text-md"
			id="days-section"
			hidden={remainingDuration.days() === 0
				? "true"
				: undefined}
		>
			<span
				id="timer-days"
				style=`--value:${remainingDuration.days()};`
				aria-live="polite"
				aria-label=`${remainingDuration.days()};`
				>{remainingDuration.days()}</span
			>
			&nbsp;days
		</span>
		<span
			class="countdown font-mono text-md"
			id="hours-section"
			hidden={remainingDuration.hours() === 0
				? "true"
				: undefined}
		>
			<span
				id="timer-hours"
				style=`--value:${remainingDuration.hours()};`
				aria-live="polite"
				aria-label=`${remainingDuration.hours()};`
				>{remainingDuration.hours()}</span
			>
			&nbsp;hours
		</span>
		<span class="countdown font-mono text-md" id="min-section">
			<span
				id="timer-min"
				style=`--value:${remainingDuration.minutes()};`
				aria-live="polite"
				aria-label=`${remainingDuration.minutes()};`
				>{remainingDuration.minutes()}</span
			>

			&nbsp;min
		</span>
		<span class="countdown font-mono text-md" id="seconds-section">
			<span
				id="timer-seconds"
				style=`--value:${remainingDuration.seconds()};`
				aria-live="polite"
				aria-label=`${remainingDuration.seconds()};`
				>{remainingDuration.seconds()}</span
			>
			&nbsp;sec
		</span>
	</div>
	<script>
		import {
			parseRawLeaderboardInfo,
			getRemaining,
			setCountdownValue,
		} from "@/lib/client/utils";

		class Countdown extends HTMLElement {
			connectedCallback() {
				let rawDuration = 1000000000;
				if (this.dataset.duration !== undefined) {
					rawDuration = +this.dataset.duration;
				}

				let rawStart = "2025-03-11T21:58:25.280689Z";
				if (this.dataset.start !== undefined) {
					rawStart = this.dataset.start;
				}

				const { duration, start } =
					parseRawLeaderboardInfo(
						rawStart,
						rawDuration,
					);

				const day_section = document.querySelector(
					"#days-section",
				) as HTMLSpanElement;
				const hours_section = document.querySelector(
					"#hours-section",
				) as HTMLSpanElement;

				const day_elem = document.querySelector(
					"#timer-days",
				) as HTMLSpanElement;
				const hours_elem = document.querySelector(
					"#timer-hours",
				) as HTMLSpanElement;
				const minutes_elem = document.querySelector(
					"#timer-min",
				) as HTMLSpanElement;
				const sec_elem = document.querySelector(
					"#timer-seconds",
				) as HTMLSpanElement;
				const updateElements = () => {
					let remaining = getRemaining(
						start,
						duration,
					);
					let leadingZeros = true;

					leadingZeros =
						leadingZeros &&
						remaining.days() === 0;
					day_section.hidden = leadingZeros;
					setCountdownValue(
						day_elem,
						remaining.days(),
					);
					leadingZeros =
						leadingZeros &&
						remaining.hours() === 0;
					hours_section.hidden = leadingZeros;
					setCountdownValue(
						hours_elem,
						remaining.hours(),
					);
					setCountdownValue(
						minutes_elem,
						remaining.minutes(),
					);
					setCountdownValue(
						sec_elem,
						remaining.seconds(),
					);
				};
				const intervalID = setInterval(
					updateElements,
					1000,
				);
			}
		}

		customElements.define("count-down", Countdown);
	</script>
</count-down>
