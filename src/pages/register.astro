---
import "../styles/styles.scss";
import SocialLoginButtons from "@/components/SocialLoginButtons.astro";
import MainLayout from "../layouts/main.astro";
---

<MainLayout title="Register">
	<section class="container" style="width: 33%;">
		<article>
			<header>
				<hgroup>
					<h2>Create a new account.</h2>
					<p>
						Customize how you appear on the
						leaderboard.
					</p>
				</hgroup>
			</header>
			<form id="register-form">
				<fieldset>
					<label> Username (optional) </label>
					<input
						name="username"
						id="username"
						placeholder="Username"
						autocomplete="username"
					/>
					<small
						>Upper and lowercase characters,
						numbers, and '.' and '-' only.</small
					>
					<label for="email">Email</label>
					<input
						type="email"
						id="email"
						name="email"
						placeholder="Email"
						autocomplete="email"
					/>

					<label for="password">Password</label>
					<input
						type="password"
						id="password"
						name="password"
						placeholder="Password"
						autocomplete="new-password"
					/>

					<small
						>Upper and lowercase characters,
						numbers, and '.' and '-' only.</small
					>
				</fieldset>
				<button type="submit">Create Account</button>
				<a
					href="/login"
					id="login-page"
					style="cursor: pointer;"
					>Log In to Existing Account</a
				>
			</form>
			<hr />
			<div role="alert" aria-live="assertive"></div>

			<footer>
				<SocialLoginButtons />
			</footer>

			<script>
				import { navigate } from "astro:transitions/client";
				import { ACCOUNT_PAGE_BASE } from "@/lib/client/urls";
				import { setupForm } from "@/lib/client/utils";
				import { authClient } from "@/lib/client/auth-client";
				import { signUpFormSchema } from "@/lib/client/schemas";

				document.addEventListener(
					"astro:page-load",
					() => {
						setupForm("#register-form", {
							onBusy: "Creating...",
							schema: signUpFormSchema,
							onSubmit: async (submission: {
								username: string;
								email: string;
								password: string;
							}) => {
								const resp =
									await authClient.signUp.email(
										{
											name: submission.username,
											username: submission.username,
											email: submission.email,
											password: submission.password,
										},
										{
											onSuccess: () => {
												navigate(
													ACCOUNT_PAGE_BASE,
												);
											},
										},
									);

								if (
									resp.error
								) {
									return resp
										.error
										.message as string;
								} else {
								}

								return true;
							},
						});
					},
				);
			</script>
		</article>
	</section>
</MainLayout>
