---
import CopyLink from "@/components/CopyLink.astro";
import Countdown from "@/components/Countdown.astro";
import PageLayout from "@/layouts/main.astro";
import {
	getLeaderboard,
	getLeaderboardInfo,
	getVerifiers,
} from "@/lib/server/api";

import {
	type Entry,
	type LeaderboardInfo,
	type Verifier,
	formatTimeAgo,
} from "@/lib/server/utils";

const { leaderboard_id } = Astro.params;

let info: LeaderboardInfo = {
	title: "",
	start: "",
	duration: "",
	allow_multiple: true,
	is_time: false,
	highest_first: true,
	created_at: "",
};
let leaderboard = { scores: [] };
let verifiers = [];
try {
	info = await getLeaderboardInfo(leaderboard_id as string);
	leaderboard = await getLeaderboard(leaderboard_id as string);
	verifiers = (await getVerifiers(leaderboard_id as string)).verifiers;
	console.log(info);
} catch (e) {
	console.log(e);
	Astro.redirect("/system-down");
}
---

<PageLayout title="Leaderboard" leaderboard={leaderboard_id}>
	<div id="leaderboard-frontmatter" data-created={info.created_at} data-multpile={info.allow_multiple} data-highest={info.highest_first} data-time={info.is_time}></div>
	<div class="flex flex-col h-screen items-center bg-base-200">
		<div class="flex flex-col min-w-full xl:min-w-196 lg:min-w-196">
			<div class="flex inline-flex justify-between my-4">
				<div
					class="flex flex-col justify-around min-h-min"
				>
					<h2
						class="lg:text-2xl xl:text-3xl link link-primary link-hover"
					>
						{info.title}
					</h2>
					<CopyLink id={leaderboard_id} />
				</div>
				<div class="flex flex-col justify-around">
					<a
						type="button"
						class="btn btn-soft btn-accent btn-xs sm:btn-sm md:btn-md lg:btn-md xl:btn-md"
						href={`/leaderboard/${leaderboard_id}/submission`}
						>+ New Submission</a
					>
				</div>
			</div>
			<div
				class="card bg-base-100 shadow-sm border-base-300 text-base-content px-4 py-2 mb-2"
				id="leaderboard-article"
			>
				<table
					id="leaderboard-table"
					is="score-table"
					class="table"
				>
					<thead>
						<tr>
							<th scope="col"></th>
							<th scope="col"
								>Player</th
							>
							<th scope="col"
								>{
									info.is_time
										? "Time"
										: "Score"
								}</th
							>
							<th
								scope="col"
								class="row-timestamp"
								>Date</th
							>
						</tr>
					</thead>
					<tbody class="leaderboard-body">
						{
							leaderboard.scores.map(
								(
									score: Entry,
									idx: number,
								) => (
									<tr
										class="hover:bg-base-300"
										data-timestamp={
											score.submitted_at
										}
									>
										<th
											class="row-rank"
											scope="row"
										>
											{idx +
												1}
											{!score.verified && (
												<sup>
													*
												</sup>
											)}
										</th>
										<td class="row-user">
											<a
												class="link link-info link-hover"
												href={`/account/${score.user.id}`}
											>
												{
													score
														.user
														.username
												}
											</a>
										</td>
										<td class="row-score">
											<a
												href={`/leaderboard/${leaderboard_id}/submission/${score.id}`}
											>
												{
													score.score
												}
											</a>
										</td>
										<td class="row-timestamp">
											{formatTimeAgo(
												score.submitted_at,
											)}
										</td>
									</tr>
								),
							)
						}
					</tbody>
					<tfoot>
						<tr>
							<td colspan="4"
								>Total
								submissions: <span
									id="player-count"
									>{
										leaderboard
											.scores
											.length
									}</span
								></td
							>
						</tr>
					</tfoot>

					<caption>
						<Countdown rawduration={info.duration} start={info.start}/>
					</caption>
				</table>
			</div>
			<small class="opacity-60"
				>*scores are not verified.</small
			>
		</div>

		<h4 class="text-l px-2">Verifiers:</h4>
		<div class="px-2">
			{
				verifiers.map(
					(verifier: Verifier, idx: number) => (
						<>
							<a
								class="link link-info link-hover"
								href={`/account/${verifier.id}`}
							>
								{
									verifier.username
								}
							</a>
							{idx + 1 <
								verifiers.length &&
								", "}
						</>
					),
				)
			}
		</div>
	</div>
</PageLayout>
